[gcode_arcs]
resolution: 0.03

[gcode_macro _PRINT_AR]
description: Helper: Action response
gcode:
  {% if params.SHOW_LCD|default('false') == 'true' %} M117 {params.T} {% endif %}
  {action_respond_info(params.T)}

#####################################################################
#  Macros
#####################################################################
#	Macros
#	Macros
#	pre-print-prep macro
[gcode_macro pre_print_prep]
gcode:
    chamber_lighting_on ;turn on lighting
    abs_warmup_temp ;tell bed to warm up
    Z_TILT_ADJUST	;adjust bed so its square to gantry
    BED_MESH_CALIBRATE ;Run Bed Mesh


#	mesh bed level the machine
[gcode_macro mesh_bed_level_machine]
gcode:
    BED_MESH_CALIBRATE	;Run Bed Mesh

[gcode_macro HOMED_STATUS]
gcode:
    {% set homed_axes = printer.toolhead.homed_axes %}
    {% set ztilt = printer.z_tilt.applied %}
    {action_respond_info("Homed axes: %s Z_Tilt Applied: %s" % (homed_axes, ztilt))}
    {% if ztilt %}
      {action_respond_info("Z_Tilt Applied")}
    {% else %}
      {action_respond_info("Z_Tilt NOT Applied")}
    {% endif%}
    
[gcode_macro _CG28]
gcode:
    {% if not "xyz" in printer.toolhead.homed_axes %}
      G28
    {% endif %}

#	combined print start gcode macro that takes into account temperature from the slicer
[gcode_macro print_start]
# params:
#   EXTRUDER
gcode:
    {% set EXTRUDER = params.EXTRUDER|default(260) %}
    {% set BED = params.BED|default(110) %}
    {% set CHAMBER = params.CHAMBER|default(110) %}
    {% set PRIME = params.PRIME|default(1) %}
    {% set RETRACT_LEN = params.RETRACT_LEN|default(0.55) %}
    {% set RETRACT_SPD = params.RETRACT_SPD|default(50) %}
    {% set x_mid = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_mid = printer.toolhead.axis_maximum.y / 2 %}
    {% set y_max = printer.toolhead.axis_maximum.y %}
    {% set speed = 300 * 60|int%}
    WLED_ON PRESET=2 ; Bed heating
    M140 S{BED}			;set bed temperature and wait
    CLEAR_PAUSE
    WLED_ON PRESET=3
    M400
    SET_RETRACTION RETRACT_LENGTH={RETRACT_LEN} RETRACT_SPEED={RETRACT_SPD}
    G21  # set units to mm
    G90  # use absolute coordinates
    G32
    G28 Z
    BED_MESH_CALIBRATE
    DETACH_PROBE
    G0 X{10} Y{y_max} F{speed}
    print_start_1			;print start macro 1
    M140 S{BED}			;set bed temperature and wait
    M109 S{EXTRUDER}		;set hotend temperature and wait
    M190 S{BED}			;set bed temperature and do not wait
    print_start_2			;print start macro 2
    {% if PRIME==1 %}
      prime_line_regular	;draw prime line in corner of bed
    {% endif %}


[gcode_macro print_start_1]
gcode:
    M104 S0 #cancel set temp
    M107 #turn cooling fans off
    G21  # set units to mm
    G90  # use absolute coordinates
    M83	# use relative extrusion
    G92 E0.0  # reset e count
    M220 S100 # reset speed multiplier
    M221 S100 # reset extrusion multiplier
    Go_To_Purge_Location	#move to nozzle scrubber bucket

[gcode_macro print_start_2]
gcode:
    nozzle_clean		#clean nozzle
    {% if 'filament_motion_sensor runout' in printer.configfile.settings %}
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=1
    {% endif %}
#    G28 Z
#    DETACH_PROBE
    
[gcode_macro prime_line_regular]
gcode:
    G1 Z20 F6000
    G1 X10 Y10 F12000
    G1 Z0.5 F600
    G1 Y105 E10 F1000
    G1 Y115 E2.5 F1000
    G92 E0.0             ;set extruder to Zero
    G92 Z0.5             ;let printer know its at 0.5
    G90                  ;set to absolute

#    Use print_end for your slicer ending script 
[gcode_macro print_end]
variable_x_retract:         2       # distance to move x on initial move away from print
variable_y_retract:         2       # distance to move y on initial move away from print
variable_z_retract:         1       # distance to lift z on initial move away from print
variable_z_min:             130     # minimum z height to end at
variable_z_lift:            10      # minimum distance to lift z on final move
variable_x_end:             160     # x position to end at
variable_y_end:             160     # y position to end at
variable_heatbed_off:       False    # whether or not to turn off heatbed
variable_motors_off:        True    # whether or not to turn off motors
gcode:
    {% set x_mid = printer.toolhead.axis_maximum.x / 2 %}
    {% set y_mid = printer.toolhead.axis_maximum.y / 2 %}
    {% set z_max = printer.toolhead.axis_maximum.z %}

    # get x retract distance
    {% if printer.toolhead.position.x < x_mid %}
        {% set x_dist = x_retract|abs %}
    {% else %}
        {% set x_dist = -(x_retract|abs) %}
    {% endif %}
    
    # get y retract distance
    {% if printer.toolhead.position.y < y_mid %}
        {% set y_dist = y_retract|abs %}
    {% else %}
        {% set y_dist = -(y_retract|abs) %}
    {% endif %}
    
    # get z retract distance
    {% if printer.toolhead.position.z + z_retract < z_max %}
        {% set z_dist = z_retract %}
    {% else %}
        {% set z_dist = z_max - printer.toolhead.position.z %}
    {% endif %}

    SAVE_GCODE_STATE NAME=END_state

    # disengage from print
    M83                                     # relative extrusion
    G91                                     # relative positioning
    {% if printer.extruder.can_extrude|lower == 'true' %}
       G1 E-0.3 F4800            # retract 0.3mm of filament
    {% endif %}
    G1 X{x_dist} Y{y_dist} Z{z_dist} F6000  # short quick move to disengage from print
    G90                                     # absolute positioning
    
    {% if printer.extruder.can_extrude|lower == 'false' %}
      {action_respond_info("Extruder Temp too low to purge")}
    {% else %}
        Go_To_Purge_Location    # move over bucket
        G0 E10 F400             # extrude filament to get better blob on end
        G0 E-1.5 F1800          # retract additional filament to move out of melt zone
        Wipe_Nozzle             # wipe nozzle
    {% endif %}
    {% if 'filament_motion_sensor runout' in printer.configfile.settings %}
      SET_FILAMENT_SENSOR SENSOR=runout ENABLE=0
    {% endif %}

    M104 S0                 # turn off hotend
    {% if heatbed_off %}
        M140 S0             # turn off heatbed
    {% endif %}
    #SET_FAN_SPEED FAN=Chamber SPEED=0

    # move to x and y ending positions
    G1 X{x_end} Y{y_end} F20000

    # move to z ending position
    {% if printer.toolhead.position.z + z_lift < z_min %}
        G1 Z{z_min}
    {% elif printer.toolhead.position.z + z_lift < z_max %}
        G91
        G1 Z{z_lift}
        G90
    {% else %}
        G1 Z{z_max}
    {% endif %}
    BED_MESH_CLEAR
    RESTORE_GCODE_STATE NAME=END_state
    UPDATE_DELAYED_GCODE ID=_print_end_leds DURATION=30
    M107                    # turn off part cooling fans
    {% if motors_off %}
        M84                 # turn off motors
    {% endif %}
    CLEAR_PAUSE             # clear pause state in case it was enabled

[delayed_gcode _print_end_leds]
gcode:
    WLED_ON PRESET=4


#	Macro to execute when pausing printer
[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
# change this if you need more or less extrusion
variable_extrude: 1.0
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### set park positon for x and y #####
    # default is your max posion from your printer.cfg
    {% set x_park = printer.toolhead.axis_maximum.x|float - 5.0 %}
    {% set y_park = printer.toolhead.axis_maximum.y|float - 5.0 %}
    ##### calculate save lift position #####
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}
    ##### end of definitions #####
    SAVE_GCODE_STATE NAME=PAUSE_state
    BASE_PAUSE
    G91
    G1 E-{E} F2100
    G1 Z{z_safe} F900
    G90
    G1 X{x_park} Y{y_park} F6000

#	Macro to execute when resuming printer
[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
    ##### read E from pause macro #####
    {% set E = printer["gcode_macro PAUSE"].extrude|float %}
    ##### end of definitions #####
    G91
    G1 E{E} F2100
    RESTORE_GCODE_STATE NAME=PAUSE_state
    BASE_RESUME

#	Macro to execute when canceling a print
[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    print_end #execute the print end macro
    CLEAR_PAUSE
    update_delayed_gcode ID=_reset_sdcard_file DURATION=3    
    BASE_CANCEL_PRINT
    WLED_ON PRESET=6

[delayed_gcode _reset_sdcard_file]
gcode:
    SDCARD_RESET_FILE


#	Notify when ABS Timer is complete
[delayed_gcode notify_chamber]
initial_duration: 0
gcode:
    {gcode.action_respond_info("action:prompt_begin Chamber Preheated")}
    {action_respond_info("action:prompt_choice OK")}
    {action_respond_info("action:prompt_show")}

#	Set Temps for chamber warmup when printing with abs 
[gcode_macro abs_warmup_temp]
# params:
    # TEMP
gcode:
    {% set TEMP = params.TEMP|default(110) %}

    M106 S127					#turn part cooling fan on to blow heat around chamber
    M190 S{TEMP}				#set bed temperature and wait
    G28							#home machine
    G0 X90 Y90 Z20 F3000		#move to center of bed
    UPDATE_DELAYED_GCODE ID=notify_chamber DURATION=1200


#	Macro for M600 - filament out pause resume 
[gcode_macro M600]
# params:
#   X
#   Y
#   Z
gcode:
    {% if printer.toolhead.status == "Ready" %}
        # do nothing
    {% else %}
        M117 Filament Change
        SAVE_GCODE_STATE NAME=M600_state
        PAUSE
        UNLOAD_FILAMENT
        RESTORE_GCODE_STATE NAME=M600_state
    {% endif %}

#	Use this command to load filament during a mid print filament swap	
[gcode_macro SWAP_RESUME] 
gcode:
     M117 Printing...
    LOAD_FILAMENT
    RESUME

#	Macro to Turn Fans Off
[gcode_macro turn_fans_off]
gcode:
    M107

#	Redefine M204 gcode to properly accel_to_decel when called instead of keeping default through the print
[gcode_macro M204]
rename_existing: M204.1
variable_ratio: 1.0     # ratio of accel_to_decel/accel
gcode:

   {% if 'P' in params %}{% set accel = params.P %}{% endif %}
   {% if 'S' in params %}{% set accel = params.S %}{% endif %}
   {% if 'T' in params %}{% set accel = params.T %}{% endif %}

    SET_VELOCITY_LIMIT ACCEL={ accel } ACCEL_TO_DECEL={ accel|float * ratio }

#	Macro to Attach the Magnetic Probe
[gcode_macro attach_probe_to_toolhead]
gcode:
    ATTACH_PROBE
    
#	Macro to Detach the Magnetic Probe
[gcode_macro detach_probe_from_toolhead]
gcode:
    DETACH_PROBE
